{"version":3,"sources":["components/Header.js","components/NuevaCita.js","components/Cita.js","components/ListaCitas.js","App.js","serviceWorker.js","index.js"],"names":["Header","titulo","className","protoTypes","PropTypes","string","isRequired","stateInicial","cita","mascota","propietario","fecha","hora","sintomas","error","NuevaCita","state","handleChange","e","console","log","target","name","setState","value","handleSubmit","preventDefault","nuevaCita","id","uuid","props","crearNuevaCita","this","onSubmit","type","placeholder","onChange","Component","Cita","eliminarCita","onClick","ListaCitas","citas","mensaje","Object","keys","length","map","key","App","datos","filter","citasLS","localStorage","getItem","JSON","parse","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e582dab1.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nconst Header = ({titulo}) => ( //nombre del props entre {} aplicando destructuring\r\n    <header>\r\n        <h1 className=\"text-center\">{titulo}</h1>\r\n    </header>\r\n);\r\n//documentar tu proyecto de React\r\nHeader.protoTypes = {\r\n    titulo : PropTypes.string.isRequired\r\n}\r\nexport default Header;","import React, { Component } from \"react\";\r\nimport uuid from \"uuid\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst stateInicial = {\r\n  cita: {\r\n    mascota: \"\",\r\n    propietario: \"\",\r\n    fecha: \"\",\r\n    hora: \"\",\r\n    sintomas: \"\"\r\n  },\r\n  error : false\r\n}\r\n\r\n\r\nclass NuevaCita extends Component {\r\n  state = {...stateInicial};\r\n\r\n  //CUANO EL USUARIO ESCRIBE EN LOS INPUT\r\n  handleChange = e => {\r\n    //colocar lo que el usuario escribe en el state\r\n    console.log(e.target.name);\r\n    this.setState({\r\n      cita: {\r\n        ...this.state.cita,\r\n        [e.target.name]: e.target.value\r\n      }\r\n    });\r\n    console.log(e.target.value);\r\n  };\r\n\r\n  //CUANDO EL USUARIO ENVÌA EL FORMULARIO\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    //extraer los valores del state\r\n    const {mascota, propietario, fecha, hora, sintomas} = this.state.cita;\r\n    //validar que todos los campos esten llenos\r\n    if(mascota === '' || propietario === '' || fecha === '' || hora === '' || sintomas === '') {\r\n      this.setState({\r\n        error: true\r\n      })\r\n      //detener la ejecución\r\n      return;\r\n    }\r\n    //generar objeto con los datos\r\n    const nuevaCita = {...this.state.cita};\r\n    nuevaCita.id = uuid();\r\n    \r\n    //Agregar la cita state de App\r\n    this.props.crearNuevaCita(nuevaCita)\r\n\r\n    //reseteando el state, colocar en el state el satateInicial\r\n    this.setState({\r\n      ...stateInicial\r\n    })\r\n\r\n  };\r\n\r\n  render() {\r\n    const { error } = this.state;\r\n    return (\r\n      <div className=\"card\">\r\n        <div className=\"card-body\">\r\n          <h2 className=\"card-title text-center mb-5\">\r\n            Llena el formulario para crear una nueva cita\r\n          </h2>\r\n          {error ? <div className=\"alert alert-danger mt-2 mb-5 text-center\">Todos los campos son obligatorios</div> : null}\r\n          <form onSubmit={this.handleSubmit}>\r\n            <div className=\"form-group row\">\r\n              <label className=\"col-sm-4 col-lg-2 col-form-label\">\r\n                Nombre Mascota\r\n              </label>\r\n              <div className=\"col-sm-8 col-lg-10\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  placeholder=\"Nombre Mascota\"\r\n                  name=\"mascota\"\r\n                  onChange={this.handleChange}\r\n                  value={this.state.cita.mascota}\r\n                />\r\n              </div>\r\n            </div>{\" \"}\r\n            {/*form-group*/}\r\n            <div className=\"form-group row\">\r\n              <label className=\"col-sm-4 col-lg-2 col-form-label\">\r\n                Nombre Dueño\r\n              </label>\r\n              <div className=\"col-sm-8 col-lg-10\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  placeholder=\"Nombre Dueño\"\r\n                  name=\"propietario\"\r\n                  onChange={this.handleChange}\r\n                  value={this.state.cita.propietario}\r\n                />\r\n              </div>\r\n            </div>{\" \"}\r\n            {/*form-group*/}\r\n            <div className=\"form-group row\">\r\n              <label className=\"col-sm-4 col-lg-2 col-form-label\">Fecha</label>\r\n              <div className=\"col-sm-8 col-lg-4\">\r\n                <input\r\n                  type=\"date\"\r\n                  className=\"form-control\"\r\n                  name=\"fecha\"\r\n                  onChange={this.handleChange}\r\n                  value={this.state.cita.fecha}\r\n                />\r\n              </div>\r\n\r\n              <label className=\"col-sm-4 col-lg-2 col-form-label\">Hora</label>\r\n              <div className=\"col-sm-8 col-lg-4\">\r\n                <input\r\n                  type=\"time\"\r\n                  className=\"form-control\"\r\n                  placeholder=\"Nombre Mascota\"\r\n                  name=\"hora\"\r\n                  onChange={this.handleChange}\r\n                  value={this.state.cita.hora}\r\n                />\r\n              </div>\r\n            </div>\r\n            {/*form-group*/}\r\n            <div className=\"form-group row\">\r\n              <label className=\"col-sm-4 col-lg-2 col-form-label\">\r\n                Síntomas\r\n              </label>\r\n              <div className=\"col-sm-8 col-lg-10\">\r\n                <textarea\r\n                  className=\"form-control\"\r\n                  name=\"sintomas\"\r\n                  placeholder=\"Describe los Síntomas\"\r\n                  onChange={this.handleChange}\r\n                  value={this.state.cita.sintomas}\r\n                ></textarea>\r\n              </div>\r\n            </div>{\" \"}\r\n            {/*form-group*/}\r\n            <input\r\n              type=\"submit\"\r\n              className=\"py-3 mt-2 btn btn-success btn-block\"\r\n              value=\"Agregar Nueva Cita\"\r\n            />\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nNuevaCita.propTypes = {\r\n  crearNuevaCita : PropTypes.func.isRequired\r\n}\r\n\r\nexport default NuevaCita;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nconst Cita = ({cita, eliminarCita}) => (\r\n    <div className=\"\">\r\n        <div>\r\n            <h3>{cita.mascota}</h3>\r\n            <p><span>Nombre Dueño: </span>{cita.propietario}</p>\r\n            <p><span>Fecha: </span>{cita.fecha}</p>\r\n            <p><span>Hora: </span>{cita.hora}</p>\r\n            <p><span>Síntomas: </span></p>\r\n            <p>{cita.sintomas}</p>\r\n            <button\r\n                className=\"btn btn-danger\"\r\n                onClick={() => eliminarCita(cita.id)}\r\n            >Borrar &times;</button>\r\n        </div>\r\n    </div>\r\n\r\n);\r\nCita.propTypes = {\r\n    cita : PropTypes.object.isRequired,\r\n    eliminarCita : PropTypes.func.isRequired\r\n}\r\nexport default Cita;","import React from \"react\";\r\nimport Cita from \"./Cita\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ListaCitas = ({ citas, eliminarCita }) => {\r\n    //IMPRIMIR UN MENSAJE EN BASE A SI HAY CITAS O NO\r\n    const mensaje = Object.keys(citas).length === 0 ? \"No hay citas\" : \"Administra las citas aqui\";\r\n\r\n    return (\r\n        <div className=\"card mt-2 py-5\">\r\n          <div className=\"card-body\">\r\n            <h2 className=\"card-title text-center\">{mensaje}</h2>\r\n            <div className=\"\">\r\n              {citas.map(cita => (\r\n                <Cita \r\n                  key={cita.id}\r\n                  cita={cita}\r\n                  eliminarCita={eliminarCita}\r\n                />\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n}\r\nListaCitas.propTypes = {\r\n    citas : PropTypes.array.isRequired,\r\n    eliminarCita : PropTypes.func.isRequired\r\n}\r\nexport default ListaCitas;\r\n","import React, { Component } from 'react';\nimport './bootstrap.min.css';\nimport Header from './components/Header';\nimport NuevaCita from './components/NuevaCita';\nimport ListaCitas from './components/ListaCitas';\n\n//import './App.css';\n\nclass App extends Component {\n  state = {\n    citas : []\n  }\n  //Cuando la aplicación carga\n  componentDidMount() {\n    const citasLS = localStorage.getItem('citas');\n    console.log(citasLS);\n    if(citasLS) {\n      this.setState({\n        citas : JSON.parse(citasLS)\n      })\n    }\n\n  }\n  //cuando agregamos o eliminamos una nueva cita\n  componentDidUpdate() {\n    localStorage.setItem('citas', JSON.stringify(this.state.citas));\n  }\n  crearNuevaCita = datos => {\n    //copiar el state actual\n    const citas = [...this.state.citas, datos] //[,{cita}]??\n    //agregar el nuevo state\n    this.setState({\n      citas\n    })\n  }\n\n  //eliminar las citas del state\n  eliminarCita = id => {\n    //tomar una copia del state\n    const citasActuales = [...this.state.citas];\n\n    //utilizar filter para sacar el elemneto \"id\" del arreglo\n    const citas = citasActuales.filter(cita => cita.id !== id)\n \n    this.setState({\n      citas\n    })\n  }\n  render() {\n    return (\n      <div className=\"container\">\n        <Header\n          titulo='Administrador Pacientes Veterinaria' //props\n        />\n        <div className=\"row\">\n          <div className=\"col-md-8 mx-auto\">\n            <NuevaCita\n            crearNuevaCita={this.crearNuevaCita}\n            />\n          </div>\n        </div>\n        <div className=\"mt-5 col-md-8 mx-auto\">\n        <ListaCitas\n          citas={this.state.citas}\n          eliminarCita={this.eliminarCita}\n        />\n        </div>\n\n      </div>\n      \n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}